name: "CI for PR"
on: [pull_request]
defaults:
  run:
    shell: bash

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_SUBSCRIPTION_ID: ${{  secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{  secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{  secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{  secrets.AZURE_AD_TENANT_ID }}
      ENV: 'demo'       

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.9

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./azure/env/${{ env.ENV }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./azure/env/${{ env.ENV }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan
      working-directory: ./azure/env/${{ env.ENV }}

    - name: "Create comment for PR"
      uses: actions/github-script@v5
      env:
        STDOUT: "```${{ steps.plan.outputs.stdout }}```"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.STDOUT
          })